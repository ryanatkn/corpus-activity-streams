import {Gen} from '@feltcoop/gro/dist/gen/gen.js';
import {toRootPath} from '@feltcoop/gro/dist/paths.js';

import {VocabularyItem, VocabularyTerm} from './activity_streams.js';
import {vocabulary} from './vocabulary.js';
import {vocabularyNotes} from './activity_streams_notes.js';
import {examples} from './activity_streams_examples.js';

// this renders a bunch of Svelte files from the notes

// TODO make this render to plain HTML as an optimization when interactivity isn't needed

const OUT_DIR = 'notes';

const toOutFile = (name: string): string => `${OUT_DIR}/${name}`;

export const gen: Gen = async ({originId}) => {
	const files = vocabulary.items.map((item) => {
		item.name;
		return {fileName: toOutFile(`${item.name}.svelte`), contents: toContents(item, originId)};
	});
	files.push({
		fileName: toOutFile('index.ts'),
		contents: toIndexContents(originId),
	});
	return files;
};

// TODO improve this authoring experience, maybe plain svelte files or `.gen.svelte` files or smth
const toContents = (item: VocabularyItem, originId: string): string => {
	const rendered = {
		// TODO do this for real - but it probably gets stripped just fine
		imports: `import EntityLink from '../EntityLink.svelte';window.hack=EntityLink;`,
		notes: processNotes(vocabularyNotes[item.name]),
		examples: processExamples(examples[item.name]),
	};
	return `
<!-- generated by /${toRootPath(originId)} -->

${
	rendered.imports?.length
		? `<script>
  ${rendered.imports}
</script>`
		: ''
}

${rendered.notes}

${rendered.examples}
`;
};
// return `
// <!-- generated by /${toRootPath(originId)} -->

// ${
// 	rendered.imports?.length
// 		? `<script>
//   ${rendered.imports}
// </script>`
// 		: ''
// }

// ${rendered.notes}

// ${rendered.examples}
// `;

const processNotes = (notes: string): string => {
	return notes.replace(/`(.+?)`/g, (text, $1) => {
		if ($1 in vocabularyNotes) {
			return `<EntityLink name="${$1}" />`;
		}
		return text;
	});
};

const processExamples = (examples: VocabularyTerm[]): string => {
	if (!examples) return '';
	let str = '';
	for (const example of examples) {
		str += `
			<pre>
				${JSON.stringify(example, null, 2)
					.replace(/([\{\}])/g, `{'$1'}`)
					.replace(
						/  "(.+?)": /g,
						(_, key) => `  "${key in vocabulary.byName ? `<EntityLink name="${key}" />` : key}": `,
					)}
			</pre>
		`;
	}
	return str;
};

const toIndexContents = (originId: string): string => `
/* generated by /${toRootPath(originId)} */
${vocabulary.items
	.map((item) => `export {default as ${item.name}} from './${item.name}.svelte';`)
	.join('')}
`;
